scalar Time

type Account{
    id: String!
    name: String!
    orders: [Order!]!
}

type Product {
    id: String!
    name: String!
    description: String!
    price:Float!
}

type Order {
    id: String!
    cratedAt: Time!
    totalPrice:Float!
    products:[OrderedProduct!]!
}

type OrderedProduct{
    id: String!
    name: String!
    description: String!
    price:Float!
    quantity:Int!
}
input PaginationInout{
    skip: Int!
    take: Int!
}
input AccountInput{
    name:String!
}
input ProductInput{
    name:String!
    description:String!
    price:Float!
}
input OrderProductInput{
    id:String!
    quantity:Int!
}
input OrderInput{
    accountId:String!
    products:[OrderProductInput]!
}
type Mutation{
    createdAccount(account:AccountInput):Account
    createdProduct(account:ProductInput):Product
    createdOrder(account:OrderInput):Order
}
type Query{
    accounts(pagination:PaginationInout,id:String):[Account!]!
    products(pagination:PaginationInout,query:String,id:String):[Product!]!
}